# editorconfig.org

# top-most EditorConfig file
root = true

# C# files
# Options in the same order as they are presented in VS Options -> Text Editor -> C# -> Code Style

[*.cs]

# tabs
insert_final_newline = true
indent_style = space
indent_size = 4
end_of_line = crlf
trim_trailing_whitespace = true
max_line_length = 100

# CODE STYLE
# defaults
dotnet_sort_system_directives_first = false

# use this
dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = true:suggestion
dotnet_style_qualification_for_event = true:suggestion

# use language keywords instead of BCL types
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# only use var when it's obvious what the variable type is
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# expression-bodied members
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# expression-level preferences
dotnet_style_object_initializer = true:none
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# variable-level preferences
csharp_style_inlined_variable_declaration = true:suggestion

# null checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# FORMATTING
# indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# new line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
#csharp_new_line_within_query_expression_clauses = true

# space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
#csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

#NAMING
# name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_symbols.constant_fields.applicable_accessibilities = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# name all static readonly fields using PascalCase
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static,readonly
dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities = *

# internal and private fields should be camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_style

dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal

dotnet_naming_style.camel_case_style.capitalization = camel_case

# async methods end in Async
dotnet_naming_rule.async_methods_must_end_with_async.severity = suggestion
dotnet_naming_rule.async_methods_must_end_with_async.symbols = async_method_symbols
dotnet_naming_rule.async_methods_must_end_with_async.style = end_in_async_style

dotnet_naming_symbols.async_method_symbols.applicable_kinds = method
dotnet_naming_symbols.async_method_symbols.required_modifiers = async
dotnet_naming_symbols.async_method_symbols.applicable_accessibilities = *

dotnet_naming_style.end_in_async_style.capitalization = pascal_case
dotnet_naming_style.end_in_async_style.required_suffix = Async

# interfaces start with I
dotnet_naming_rule.interfaces_must_start_with_i.severity = error
dotnet_naming_rule.interfaces_must_start_with_i.symbols = interface_symbols
dotnet_naming_rule.interfaces_must_start_with_i.style = begin_with_i_style

dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

dotnet_naming_style.begin_with_i_style.capitalization  = pascal_case
dotnet_naming_style.begin_with_i_style.required_prefix = I

# name everything else using PascalCase
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.severity = suggestion
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.symbols = everything_else_symbols
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.style = pascal_case_style

#dotnet_naming_symbols.everything_else_symbols.applicable_kinds = class,struct,enum,delegate,event,method,property,namespace,type_parameter
dotnet_naming_symbols.everything_else_symbols.applicable_kinds = class,struct,enum,delegate,event,method,property
dotnet_naming_symbols.everything_else_symbols.applicable_accessibilities = *

# C++ files

[*.{cpp,h}]

# tabs
insert_final_newline = true
indent_style = space
indent_size = 4
end_of_line = crlf
trim_trailing_whitespace = true
max_line_length = 100
#curly_bracket_next_line = true
#indent_brace_style = Allman
